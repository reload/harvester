<?php

namespace Harvester\FetchBundle\Entity;

use Doctrine\ORM\EntityRepository;
use DateTime;
use Harvest_User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Create or update a Doctrine user object.
     *
     * @param \Harvest_User $harvest_user
     * @param $output
     */
    public function registerUser(Harvest_User $harvest_user, $output)
    {
        $user = $this->getEntityManager()->getRepository('HarvesterFetchBundle:User')->findOneById($harvest_user->id);

        // Create user.
        if (!$user)
        {
            $user = new User;
            $this->saveUser($user, $harvest_user);
            $output->writeln('<info>' . $harvest_user->first_name . ' ' . $harvest_user->last_name . ' created.</info>');
        }
        else
        {
            $user_last_update = new DateTime($harvest_user->get('updated-at'));

            // Check if user is updated in the Harvest API.
            if ($user->getUpdatedAt()->getTimestamp() < $user_last_update->getTimestamp()-3600)
            {
                // Update user.
                $this->saveUser($user, $harvest_user);
            }
        }

        return $user;
    }

    /**
     * Save Harvest_User to database.
     *
     * @param User $user
     * @param Harvest_User $harvest_user.
     * @return User $user
     */
    public function saveUser(User $user, Harvest_User $harvest_user)
    {
        $user->setId($harvest_user->id);
        $user->setFirstName($harvest_user->get('first-name'));
        $user->setLastName($harvest_user->get('last-name'));
        $user->setEmail($harvest_user->get('email'));
        $user->setCreatedAt(new DateTime($harvest_user->get('created-at')));
        $user->setIsActive($harvest_user->get('is-active') == 'true' ? 1 : 0);
        $user->setIsAdmin($harvest_user->get('is-admin') == 'true' ? 1 : 0);
        $user->setIsContractor($harvest_user->get('is-contractor') == 'true' ? 1 : 0);
        $user->setUpdatedAt(new DateTime($harvest_user->get('updated-at')));

        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();

        return $user;
    }
}
