<?php

namespace Harvester\FetchBundle\Entity;

use Doctrine\ORM\EntityRepository;
use DateTime;
use Harvest_User;
use Harvester\APIBundle\Controller\EntryController;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Validate the token.
     * @param EntryController $controller
     * @param String $token
     * @return user_id | JsonReponse object
     */
    static public function validateToken(EntryController $controller, $token = null)
    {

        // Split the token.
        list($hash, $email) = explode('|', $token);

        $repository = $controller->getDoctrine()
            ->getRepository('HarvesterFetchBundle:User');

        $query = $repository->createQueryBuilder('u')
            ->where('u.email = :email')
            ->andWhere('u.password = :password')
            ->setParameter('email', $email)
            ->setParameter('password', $hash)
            ->getQuery();

        $result = $query->getResult();

        if ($result) {
            // Set response to validated user id.
            $response = $result[0]->getId();
        }
        else {
            // Set response to 401 unauthorized.
            $response = new JsonResponse(); // Construct a new JSON response
            $response->setStatusCode(401); // Set unauthorized.
            $response->setData(null);
        }

        return $response;
    }


    /**
     * Create or update a Doctrine user object.
     *
     * @param \Harvest_User $harvest_user
     * @param $output
     */
    public function registerUser(Harvest_User $harvest_user, OutputInterface $output)
    {
        $user = $this->getEntityManager()->getRepository('HarvesterFetchBundle:User')->findOneById($harvest_user->id);

        // Create user.
        if (!$user) {
            $user = new User;
            $this->saveUser($user, $harvest_user);
            $output->writeln('<info> --> created.</info>');
        }
        else {
            $user_last_update = new DateTime($harvest_user->get('updated-at'));

            // Check if user is updated in the Harvest API.
            if ($user->getUpdatedAt()->getTimestamp() < $user_last_update->getTimestamp() - 7200) {
                // Update user.
                $this->saveUser($user, $harvest_user);
                $output->writeln('<comment>--> updated.</comment>');
            }
        }

        return $user;
    }

    /**
     * Save Harvest_User to database.
     *
     * @param User $user
     * @param Harvest_User $harvest_user.
     * @return User $user
     */
    public function saveUser(User $user, Harvest_User $harvest_user)
    {
        $user->setId($harvest_user->id);
        $user->setFirstName($harvest_user->get('first-name'));
        $user->setLastName($harvest_user->get('last-name'));
        $user->setEmail($harvest_user->get('email'));
        $user->setCreatedAt(new DateTime($harvest_user->get('created-at')));
        $user->setIsActive($harvest_user->get('is-active') == 'true' ? 1 : 0);
        $user->setIsAdmin($harvest_user->get('is-admin') == 'true' ? 1 : 0);
        $user->setIsContractor($harvest_user->get('is-contractor') == 'true' ? 1 : 0);
        $user->setUpdatedAt(new DateTime($harvest_user->get('updated-at')));

        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();

        return $user;
    }
}
