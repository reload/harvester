<?php

namespace Harvester\FetchBundle\Entity;

use Doctrine\ORM\EntityRepository;
use DateTime;
use Harvest_Task;
use Symfony\Component\Console\Output\ConsoleOutput;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{

    public function registerTask(Harvest_Task $harvest_task, ConsoleOutput $output)
    {
        $task = $this->getEntityManager()->getRepository('HarvesterFetchBundle:Task')->findOneById($harvest_task->get('id'));

        if (!$task) {
            $task = new Task();
            $this->saveTask($task, $harvest_task);
            $output->writeln('<info>' . $harvest_task->get('name') . '<info> <comment>created.</comment>');
        }
        else {
            $task_last_update = new DateTime($harvest_task->get('updated-at'));

            if ($task->getUpdatedAt()->getTimestamp() < ($task_last_update->getTimestamp()-7200)) {
                $this->saveTask($task, $harvest_task);
                $output->writeln('<info>'.$harvest_task->name. ' have been updated.</info>');
            }
            else {
                $output->writeln('<comment>'.$harvest_task->name . ' is up to date.</comment>');
            }
        }
        return $task;
    }

    public function saveTask(Task $task, Harvest_Task $harvest_task)
    {
        $task->setId($harvest_task->get('id'));
        $task->setName($harvest_task->get('name'));
        $task->setIsDefault($harvest_task->get('is-default') == 'false' ? 0 : 1);
        $task->setDefaultHourlyRate($harvest_task->get('default-hourly-rate'));
        $task->setBillableByDefault($harvest_task->get('billable-by-default') == 'false' ? 0 : 1);
        $task->setDeactivated($harvest_task->get('deactivated') == 'false' ? 0 : 1);
        $task->setUpdatedAt(new DateTime($harvest_task->get('updated-at')));
        $task->setCreatedAt(new DateTime($harvest_task->get('created-at')));

        $em = $this->getEntityManager();
        $em->persist($task);
        $em->flush();

        return $task;
    }
}
