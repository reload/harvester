<?php

namespace Harvester\FetchBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Harvest_Result;
use Harvest_DayEntry;
use DateTime;

/**
 * EntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntryRepository extends EntityRepository
{
    public function registerEntry(Harvest_Result $user_entries, $output)
    {
        foreach ($user_entries->get('data') as $user_entry)
        {
            $entry = $this->getEntityManager()->getRepository('HarvesterFetchBundle:Entry')->findOneByEntryId($user_entry->get('id'));

            if (!$entry)
            {
                $entry = new Entry();
                $this->saveEntry($entry, $user_entry);
                $output->writeln('<info>created.</info>');
            }
            else{
                $output->writeln('<comment>not created.</comment>');
            }

        }
    }

    public function saveEntry(Entry $entry, Harvest_DayEntry $harvest_entry)
    {

        $entry->setEntryId($harvest_entry->get('id'));
        $entry->setProjectId($harvest_entry->get('project-id'));
        $entry->setTaskId($harvest_entry->get('task-id'));
        $entry->setUserId($harvest_entry->get('user-id'));
        $entry->setNotes($harvest_entry->get('notes'));
        $entry->setHours($harvest_entry->get('hours'));
        $entry->setIsClosed($harvest_entry->get('is-closed') == 'true' ? 1 : 0);
        $entry->setIsBilled($harvest_entry->get('is-billed') == 'true' ? 1 : 0);
        $entry->setSpentAt(new DateTime($harvest_entry->get('spent-at')));
        $entry->setTimerStartedAt(new DateTime($harvest_entry->get('timer-started-at')));
        $entry->setUpdatedAt(new DateTime($harvest_entry->get('updated-at')));
        $entry->setCreatedAt(new DateTime($harvest_entry->get('created-at')));

        $em = $this->getEntityManager();
        $em->persist($entry);
        $em->flush();
    }
}
