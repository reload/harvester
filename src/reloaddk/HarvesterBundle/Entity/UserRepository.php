<?php

namespace reloaddk\HarvesterBundle\Entity;

use Doctrine\ORM\EntityRepository;
use DateTime;
use Harvest_User;
use reloaddk\HarvesterBundle\Controller\ApiEntryController;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\Output;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{

    /**
     * Tweaked to load user by email and not username.
     *
     * @param string $username
     * @return mixed|UserInterface
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.email = :email')
            ->setParameter('email', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    /**
     * {@inheritdoc}
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    /**
     * {@inheritdoc}
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }
    /**
     * List of users.
     *
     * @param $is_admin
     * @param $is_active
     * @param $is_contractor
     * @return array
     */
    public function getUserList($is_admin, $is_active, $is_contractor)
    {
        $query = $this->createQueryBuilder('u');

        $query->where('u.isContractor = :is_contractor')
            ->andWhere('u.isActive = :is_active')
            ->setParameters(array(
                'is_contractor' => $is_contractor,
                'is_active' => $is_active,
            ));

        if ($is_admin) {
            $query->andWhere('u.isAdmin = :is_admin')
                ->setParameter('is_admin', $is_admin);
        }

        return $query
            ->getQuery()
            ->getResult();
    }

    /**
     * Validate the token.
     * @param EntryController $controller
     * @param String $token
     * @return user_id | JsonReponse object
     */
    static public function validateToken(ApiEntryController $controller, $token = null)
    {
        if (strstr($token, '|')) {
            // Split the token.
            list($hash, $email) = explode('|', $token);

            $repository = $controller->getDoctrine()
                ->getRepository('reloaddkHarvesterBundle:User');

            $query = $repository->createQueryBuilder('u')
                ->where('u.email = :email')
                ->andWhere('u.password = :password')
                ->setParameter('email', $email)
                ->setParameter('password', $hash)
                ->getQuery();

            $result = $query->getResult();
        }
        if (isset($result) && count($result)) {
            // Set response to validated user id.
            $response = $result[0]->getId();
        }
        else {
            // Set response to 401 unauthorized.
            $response = new JsonResponse(); // Construct a new JSON response
            $response->setStatusCode(401); // Set unauthorized.
            $response->setData(null);
        }

        return $response;
    }

    /**
     * Create or update a Doctrine user object.
     *
     * @param Harvest_User $harvest_user
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return User
     */
    public function registerUser(Harvest_User $harvest_user, InputInterface $input, OutputInterface $output)
    {
        $user = $this->getEntityManager()
            ->getRepository('reloaddkHarvesterBundle:User')
            ->findOneById($harvest_user->id);

        // Create user.
        if (!$user) {
            $user = new User;
            $this->saveUser($user, $harvest_user, $input, $output);
            $output->writeln('<info> --> created.</info>');
        }
        else {
            $user_last_update = new DateTime($harvest_user->get('updated-at'));

            // Check if user is updated in the Harvest API.
            if ($user->getUpdatedAt()->getTimestamp() < $user_last_update->getTimestamp() - 7200) {
                // Update user.
                $this->saveUser($user, $harvest_user, $input, $output);
                $output->writeln('<comment>--> User information updated.</comment>');
            }
        }

        return $user;
    }

    /**
     * Save Harvest_User to database.
     *
     * @param User $user
     * @param Harvest_User $harvest_user
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return User
     */
    public function saveUser(User $user, Harvest_User $harvest_user, InputInterface $input, OutputInterface $output)
    {
        $user->setId($harvest_user->id);
        $user->setFirstName($harvest_user->get('first-name'));
        $user->setLastName($harvest_user->get('last-name'));
        $user->setEmail($harvest_user->get('email'));
        $user->setCreatedAt(new DateTime($harvest_user->get('created-at')));
        $user->setIsActive($harvest_user->get('is-active') == 'true' ? 1 : 0);
        $user->setIsAdmin($harvest_user->get('is-admin') == 'true' ? 1 : 0);
        $user->setIsContractor($harvest_user->get('is-contractor') == 'true' ? 1 : 0);
        $user->setUpdatedAt(new DateTime($harvest_user->get('updated-at')));

        // Get Role 'ROLE_ADMIN' Object from Role table.
        $userRole = $this->getEntityManager()
            ->getRepository('reloaddkHarvesterBundle:Role')
            ->findOneByName('ROLE_ADMIN');

        // If 'ROLE_ADMIN' doesn't exists, create it.
        if (!$userRole) {
            $userRole = new Role();

            $userRole
                ->setName('ROLE_ADMIN')
                ->setRole('ROLE_ADMIN');

            $em = $this->getEntityManager();
            $em->persist($userRole);
            $em->flush();
        }

        // If the user is admin and don't have admin role set in db.
        if ($user->getIsAdmin() == true && !$user->hasRole('ROLE_ADMIN')) {
            // Add ROLE_ADMIN to the user.
            $user->addUserRole($userRole);
            $output->writeln('<comment>--> Admin role added.</comment>');
        }
        // If the user isn't admin, and has the ROLE_ADMIN and we aren't preserving the roles.
        elseif ($user->getIsAdmin() == false && $user->hasRole('ROLE_ADMIN') && !$input->getOption('preserve-roles')) {
            // Remove ROLE_ADMIN from user.
            $user->removeUserRole($userRole);
            $output->writeln('<comment>--> Admin role removed.</comment>');
        }

        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();

        return $user;
    }
}
